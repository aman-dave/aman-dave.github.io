{"componentChunkName":"component---src-templates-note-template-js","path":"/notes/Designing Data Intensive Applications/Data Models and Query Language/","webpackCompilationHash":"1307dca3626bbb061791","result":{"data":{"markdownRemark":{"html":"<h1>Data Models and Query Language</h1>\n<p>Data models are perhaps the most important part of developing software, because\nthey have such a profound effect: not only on how the software is written, but also on\nhow we think about the problem that we are solving.</p>\n<blockquote>\n<p>The limits of my language mean the limits of my world.\nâ€”Ludwig Wittgenstein, Tractatus Logico-Philosophicus (1922)</p>\n</blockquote>\n<h2>Relational vs Document Databases</h2>\n<ul>\n<li>Document models are preferred due to their flexibility and better performance due to locality.</li>\n<li>Relational models are preferred due to joins and many-to-one or many-to-many relationships.</li>\n</ul>\n<h3>Which data model leads to simpler application code?</h3>\n<ul>\n<li>\n<p>If the application has a tree like strucutre where an entire tree is loaded at once, document databases are preffered.</p>\n<ul>\n<li>Analytics type of applications need document based database.</li>\n</ul>\n</li>\n<li>\n<p>If the application has many-to-many relationships, relational model is preffered.</p>\n<ul>\n<li>Applications which require join will have better support from relational database.</li>\n</ul>\n</li>\n</ul>\n<h3>Schema flexibility</h3>\n<ul>\n<li>Document models are often called schemaless, but the correct way to describe it would be <em>schema-on-read</em>, and similarly, relational models can be called <em>schema-on-write.</em></li>\n<li><em>Schema-on-read</em> is similar to dynamic (<em>run-time</em>) type checking in programming languages, whereas <em>schema-on-write</em> is similar to static (<em>compile-time</em>) type checking.</li>\n<li>\n<p>Document Model is preffered:</p>\n<ul>\n<li>There are many different types of objects, and it is not practical to put each type of object in its own table.</li>\n<li>The structure of the data is determined by external systems over which you have no control and which may change at any time.</li>\n</ul>\n</li>\n<li>\n<p>Relational Model is preffered:</p>\n<ul>\n<li>Records are expected to have the same structure</li>\n</ul>\n</li>\n</ul>\n<h3>Data locality for queries</h3>\n<ul>\n<li>Document model provides the storage locality, meaning if you need to render an entire document on a webpage it is easier to use this model.</li>\n<li>The locality advantage only applies if you need large parts of the document at the same time.</li>\n<li>Relational models provide better efficiency if you need to access only a small portion or need to update only a small part.</li>\n</ul>\n<h2>Graph Databases</h2>\n<ul>\n<li>Document model is generally used for relationless or one-to-many relations.</li>\n<li>For many-to-many relational model is used.</li>\n<li>But as connections start getting complex, graph is preferred.</li>\n<li>A graph consists of two kinds of objects: <strong>vertices</strong> (also known as nodes or entities) and <strong>edges</strong> (also known as relationships or arcs).</li>\n<li>A Graph store can be thought of as consisting two relational tables, one for the vertices and one for edges.</li>\n</ul>\n<h3>Case Study: Facebook's Graph Structure:</h3>\n<ul>\n<li>Facebook maintains a single graph with many different types of vertices and\nedges.</li>\n<li>Vertices represent people, locations, events, check-ins, and comments made by\nusers.</li>\n<li>Edges indicate which people are friends with each other, which check-in happened in which location, who commented on which post, who attended which event, and so on</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">//Representing a property graph using a relational schema</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> vertices <span class=\"token punctuation\">(</span>\n\t\tvertex_id <span class=\"token keyword\">integer</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n\t\tproperties json\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> edges <span class=\"token punctuation\">(</span>\n\t\tedge_id <span class=\"token keyword\">integer</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n\t\ttail_vertex <span class=\"token keyword\">integer</span> <span class=\"token keyword\">REFERENCES</span> vertices <span class=\"token punctuation\">(</span>vertex_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\thead_vertex <span class=\"token keyword\">integer</span> <span class=\"token keyword\">REFERENCES</span> vertices <span class=\"token punctuation\">(</span>vertex_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tlabel <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>\n\t\tproperties json\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> edges_tails <span class=\"token keyword\">ON</span> edges <span class=\"token punctuation\">(</span>tail_vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> edges_heads <span class=\"token keyword\">ON</span> edges <span class=\"token punctuation\">(</span>head_vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"May 26, 2020","title":"Data Models and Query Language"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/notes/Designing Data Intensive Applications/Data Models and Query Language/"}}}